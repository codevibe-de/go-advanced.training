// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pizza.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PizzaService_GetProduct_FullMethodName   = "/pizza.PizzaService/GetProduct"
	PizzaService_ListProducts_FullMethodName = "/pizza.PizzaService/ListProducts"
)

// PizzaServiceClient is the client API for PizzaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PizzaServiceClient interface {
	// Get a single product by ID
	GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	// Stream all available products (continuous data stream)
	ListProducts(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProductResponse], error)
}

type pizzaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPizzaServiceClient(cc grpc.ClientConnInterface) PizzaServiceClient {
	return &pizzaServiceClient{cc}
}

func (c *pizzaServiceClient) GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, PizzaService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) ListProducts(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProductResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PizzaService_ServiceDesc.Streams[0], PizzaService_ListProducts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProductListRequest, ProductResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PizzaService_ListProductsClient = grpc.ServerStreamingClient[ProductResponse]

// PizzaServiceServer is the server API for PizzaService service.
// All implementations must embed UnimplementedPizzaServiceServer
// for forward compatibility.
type PizzaServiceServer interface {
	// Get a single product by ID
	GetProduct(context.Context, *ProductRequest) (*ProductResponse, error)
	// Stream all available products (continuous data stream)
	ListProducts(*ProductListRequest, grpc.ServerStreamingServer[ProductResponse]) error
	mustEmbedUnimplementedPizzaServiceServer()
}

// UnimplementedPizzaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPizzaServiceServer struct{}

func (UnimplementedPizzaServiceServer) GetProduct(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedPizzaServiceServer) ListProducts(*ProductListRequest, grpc.ServerStreamingServer[ProductResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedPizzaServiceServer) mustEmbedUnimplementedPizzaServiceServer() {}
func (UnimplementedPizzaServiceServer) testEmbeddedByValue()                      {}

// UnsafePizzaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PizzaServiceServer will
// result in compilation errors.
type UnsafePizzaServiceServer interface {
	mustEmbedUnimplementedPizzaServiceServer()
}

func RegisterPizzaServiceServer(s grpc.ServiceRegistrar, srv PizzaServiceServer) {
	// If the following call pancis, it indicates UnimplementedPizzaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PizzaService_ServiceDesc, srv)
}

func _PizzaService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).GetProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_ListProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PizzaServiceServer).ListProducts(m, &grpc.GenericServerStream[ProductListRequest, ProductResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PizzaService_ListProductsServer = grpc.ServerStreamingServer[ProductResponse]

// PizzaService_ServiceDesc is the grpc.ServiceDesc for PizzaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PizzaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pizza.PizzaService",
	HandlerType: (*PizzaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _PizzaService_GetProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListProducts",
			Handler:       _PizzaService_ListProducts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pizza.proto",
}
